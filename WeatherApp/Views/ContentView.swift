import SwiftUI\n\n/// Main container view for the weather app\nstruct ContentView: View {\n    @EnvironmentObject var viewModel: WeatherViewModel\n    @State private var showLocationSelector = false\n    @State private var showSettings = false\n    \n    let cityCoordinates = [\n        \"Seattle, WA\": \"47.6062,-122.3321\",\n        \"Portland, OR\": \"45.5152,-122.6784\",\n        \"San Francisco, CA\": \"37.7749,-122.4194\",\n        \"Los Angeles, CA\": \"34.0522,-118.2437\",\n        \"New York, NY\": \"40.7128,-74.0060\",\n        \"Chicago, IL\": \"41.8781,-87.6298\",\n        \"Miami, FL\": \"25.7617,-80.1918\",\n        \"Denver, CO\": \"39.7392,-104.9903\"\n    ]\n    \n    var body: some View {\n        NavigationView {\n            ZStack {\n                // Main content\n                VStack {\n                    if viewModel.isLoading && viewModel.weatherData.daily.isEmpty {\n                        LoadingView()\n                    } else if let error = viewModel.error, viewModel.weatherData.daily.isEmpty {\n                        ErrorView(errorMessage: error)\n                    } else {\n                        WeatherDashboardView()\n                    }\n                }\n                \n                // Error toast\n                if let error = viewModel.error, !viewModel.weatherData.daily.isEmpty {\n                    VStack {\n                        Spacer()\n                        ErrorToastView(errorMessage: error)\n                    }\n                    .padding(.bottom)\n                    .transition(.move(edge: .bottom))\n                    .animation(.easeInOut, value: viewModel.error != nil)\n                }\n            }\n            .navigationTitle(viewModel.weatherData.location.isEmpty ? \"Weather\" : viewModel.weatherData.location)\n            .toolbar {\n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(action: {\n                        showLocationSelector.toggle()\n                    }) {\n                        Label(\"Location\", systemImage: \"mappin.circle\")\n                    }\n                    .popover(isPresented: $showLocationSelector) {\n                        LocationSelectorView(cityCoordinates: cityCoordinates) { city, coordinates in\n                            viewModel.fetchWeatherData(for: coordinates)\n                            showLocationSelector = false\n                        }\n                    }\n                }\n                \n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(action: {\n                        viewModel.refreshWeather()\n                    }) {\n                        Label(\"Refresh\", systemImage: \"arrow.clockwise\")\n                    }\n                    .disabled(viewModel.isRefreshing)\n                }\n                \n                ToolbarItem(placement: .navigationBarLeading) {\n                    Button(action: {\n                        showSettings.toggle()\n                    }) {\n                        Label(\"Settings\", systemImage: \"gear\")\n                    }\n                    .sheet(isPresented: $showSettings) {\n                        SettingsView()\n                    }\n                }\n            }\n        }\n        .onAppear {\n            // Request location on first launch if we have no data\n            if viewModel.weatherData.daily.isEmpty {\n                viewModel.requestLocation()\n            }\n        }\n    }\n}\n\n/// Loading view while fetching data\nstruct LoadingView: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            ProgressView()\n                .scaleEffect(1.5)\n            \n            Text(\"Loading weather data...\")\n                .foregroundColor(.secondary)\n        }\n        .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n}\n\n/// Error view when data fetch fails\nstruct ErrorView: View {\n    let errorMessage: String\n    @EnvironmentObject var viewModel: WeatherViewModel\n    \n    var body: some View {\n        VStack(spacing: 20) {\n            Image(systemName: \"exclamationmark.triangle\")\n                .font(.system(size: 50))\n                .foregroundColor(.orange)\n            \n            Text(\"Unable to load weather data\")\n                .font(.headline)\n            \n            Text(errorMessage)\n                .font(.subheadline)\n                .foregroundColor(.secondary)\n                .multilineTextAlignment(.center)\n                .padding(.horizontal)\n            \n            Button(action: {\n                viewModel.refreshWeather()\n            }) {\n                Text(\"Try Again\")\n                    .font(.headline)\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n        .padding()\n        .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n}\n\n/// Toast-style error notification\nstruct ErrorToastView: View {\n    let errorMessage: String\n    \n    var body: some View {\n        HStack {\n            Image(systemName: \"exclamationmark.triangle\")\n                .foregroundColor(.white)\n            \n            Text(errorMessage)\n                .font(.subheadline)\n                .foregroundColor(.white)\n            \n            Spacer()\n        }\n        .padding()\n        .background(Color.red.opacity(0.8))\n        .cornerRadius(8)\n        .padding(.horizontal)\n    }\n}\n\n/// Settings view\nstruct SettingsView: View {\n    @EnvironmentObject var viewModel: WeatherViewModel\n    @Environment(\\.presentationMode) var presentationMode\n    \n    var body: some View {\n        NavigationView {\n            Form {\n                Section(header: Text(\"Units\")) {\n                    Picker(\"Temperature\", selection: $viewModel.preferences.unit) {\n                        ForEach(WeatherViewModel.TemperatureUnit.allCases) { unit in\n                            Text(unit == .fahrenheit ? \"Fahrenheit (\u00b0F)\" : \"Celsius (\u00b0C)\")\n                                .tag(unit)\n                        }\n                    }\n                }\n                \n                Section(header: Text(\"Display Options\")) {\n                    Toggle(\"Show Historical Range\", isOn: $viewModel.preferences.showHistoricalRange)\n                    Toggle(\"Show Anomalies\", isOn: $viewModel.preferences.showAnomalies)\n                    Toggle(\"Show Historical Average\", isOn: $viewModel.preferences.showHistoricalAvg)\n                }\n                \n                Section(header: Text(\"About\")) {\n                    HStack {\n                        Text(\"Version\")\n                        Spacer()\n                        Text(\"1.0.0\")\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n            .navigationTitle(\"Settings\")\n            .toolbar {\n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button(\"Done\") {\n                        presentationMode.wrappedValue.dismiss()\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n            .environmentObject(WeatherViewModel())\n    }\n}
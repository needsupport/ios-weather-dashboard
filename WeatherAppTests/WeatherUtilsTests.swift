import XCTest\n@testable import WeatherApp\n\nclass WeatherUtilsTests: XCTestCase {\n    \n    func testFahrenheitToCelsius() {\n        // Given\n        let fahrenheit = 77.0\n        let expectedCelsius = 25.0\n        \n        // When\n        let result = WeatherUtils.fahrenheitToCelsius(fahrenheit)\n        \n        // Then\n        XCTAssertEqual(result, expectedCelsius, accuracy: 0.01)\n    }\n    \n    func testCelsiusToFahrenheit() {\n        // Given\n        let celsius = 25.0\n        let expectedFahrenheit = 77.0\n        \n        // When\n        let result = WeatherUtils.celsiusToFahrenheit(celsius)\n        \n        // Then\n        XCTAssertEqual(result, expectedFahrenheit, accuracy: 0.01)\n    }\n    \n    func testCalculateHeatIndex() {\n        // Given\n        let temperature = 90.0\n        let humidity = 60.0\n        \n        // When\n        let result = WeatherUtils.calculateHeatIndex(temperature: temperature, humidity: humidity)\n        \n        // Then\n        XCTAssertGreaterThan(result, temperature, \"Heat index should be higher than actual temperature in hot humid conditions\")\n    }\n    \n    func testCalculateWindChill() {\n        // Given\n        let temperature = 20.0\n        let windSpeed = 15.0\n        \n        // When\n        let result = WeatherUtils.calculateWindChill(temperature: temperature, windSpeed: windSpeed)\n        \n        // Then\n        XCTAssertLessThan(result, temperature, \"Wind chill should be lower than actual temperature in cold windy conditions\")\n    }\n    \n    func testCalculateDewPoint() {\n        // Given\n        let temperature = 75.0\n        let humidity = 65.0\n        \n        // When\n        let result = WeatherUtils.calculateDewPoint(temperature: temperature, humidity: humidity)\n        \n        // Then\n        XCTAssertLessThan(result, temperature, \"Dew point should be lower than air temperature\")\n        XCTAssertGreaterThan(result, 32.0, \"Dew point should be above freezing for these conditions\")\n    }\n    \n    func testGetUVIndexDescription() {\n        // Test low UV index\n        let lowResult = WeatherUtils.getUVIndexDescription(2)\n        XCTAssertEqual(lowResult.description, \"Low\")\n        XCTAssertEqual(lowResult.color, \"#65B73B\")\n        \n        // Test moderate UV index\n        let modResult = WeatherUtils.getUVIndexDescription(4)\n        XCTAssertEqual(modResult.description, \"Moderate\")\n        XCTAssertEqual(modResult.color, \"#F8D333\")\n        \n        // Test high UV index\n        let highResult = WeatherUtils.getUVIndexDescription(7)\n        XCTAssertEqual(highResult.description, \"High\")\n        XCTAssertEqual(highResult.color, \"#F1883C\")\n        \n        // Test very high UV index\n        let veryHighResult = WeatherUtils.getUVIndexDescription(9)\n        XCTAssertEqual(veryHighResult.description, \"Very High\")\n        XCTAssertEqual(veryHighResult.color, \"#ED3D39\")\n        \n        // Test extreme UV index\n        let extremeResult = WeatherUtils.getUVIndexDescription(11)\n        XCTAssertEqual(extremeResult.description, \"Extreme\")\n        XCTAssertEqual(extremeResult.color, \"#D63ADF\")\n    }\n    \n    func testWindDirectionToDegrees() {\n        // Test cardinal directions\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"N\"), 0)\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"E\"), 90)\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"S\"), 180)\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"W\"), 270)\n        \n        // Test ordinal directions\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"NE\"), 45)\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"SE\"), 135)\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"SW\"), 225)\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"NW\"), 315)\n        \n        // Test case insensitivity\n        XCTAssertEqual(WeatherUtils.windDirectionToDegrees(\"ne\"), 45)\n        \n        // Test invalid input\n        XCTAssertNil(WeatherUtils.windDirectionToDegrees(\"INVALID\"))\n    }\n}